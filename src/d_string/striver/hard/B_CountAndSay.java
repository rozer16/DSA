package d_string.striver.hard;


/*

https://takeuforward.org/plus/dsa/strings--advanced-algo/medium-problems/count-and-say

The count-and-say sequence is a sequence of digit strings defined by the following recursive formula:



countAndSay(1) = "1"
For n > 1, countAndSay(n) is generated by describing countAndSay(n-1) in terms of the frequency and value of consecutive identical digits.


For example:

"1" is read as "one 1" or "11".
"11" is read as "two 1s" or "21".
"21" is read as "one 2, then one 1" or "1211".
"1211" is read as "one 1, one 2, then two 1s" or "111221".
"111221" is read as "three 1s, two 2s, then one 1" or "312211".


Given a positive integer n, return the nth term of the count-and-say sequence.


Examples:
Input: n = 4



Output: "1211"



Explanation:

countAndSay(1) = "1"

countAndSay(2) is described as "one 1" = "11"

countAndSay(3) is described as "two 1s" = "21"

countAndSay(4) is described as "one 2, then one 1" = "1211"

Input: n = 1



Output: "1"



Explanation:

This is the base case where countAndSay(1) is "1".


* */
public class B_CountAndSay {

    public static void main(String[] args) {
        B_CountAndSay obj = new B_CountAndSay();
        System.out.println(obj.countAndSay(1));//1
        System.out.println(obj.countAndSay(2));//11
        System.out.println(obj.countAndSay(3));//21
        System.out.println(obj.countAndSay(4));//1211
        System.out.println(obj.countAndSay(5));//11121
    }

    public String countAndSay(int n) {
        // Base case: if n is 1, return "1"
        if (n == 1) {
            return "1";
        }

        // Recursively get the previous term in the sequence
        String prev = countAndSay(n - 1);
        int len = prev.length();
        int freq = 1; // Frequency of the current digit
        StringBuilder result = new StringBuilder();

        // Iterate through the previous term to construct the current term
        for (int i = 1; i < len; i++) {
            if (prev.charAt(i - 1) == prev.charAt(i)) {
                freq++; // Increment frequency if the same digit continues
            } else {
                // Append the frequency and the digit to the result
                result.append(freq);
                result.append(prev.charAt(i - 1));
                freq = 1; // Reset frequency for the new digit
            }
        }
        // Append the frequency and the last digit to the result
        result.append(freq);
        result.append(prev.charAt(len - 1));

        return result.toString(); // Return the constructed term
    }
}
