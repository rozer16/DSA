
https://youtu.be/V6H1qAeB-l4?list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn
https://takeuforward.org/data-structure/dijkstras-algorithm-using-priority-queue-g-32/


Given a weighted, undirected, and connected graph of V vertices and an adjacency list adj
where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is an edge between i and j,
second integers corresponds to the weight of that edge.

You are given the source vertex S and You have to Find the shortest distance of all the vertex from the source vertex S.
You have to return a list of integers denoting the shortest distance between each node and the Source vertex S.

V = 2
adj [] = {{{1, 9}}, {{0, 9}}}
S = 0

0 -> 1
  9


Approach :

Initial configuration:

Source Node: Before starting off with the Algorithm, we need to define a source node from which the shortest distances to every other node would be calculated.
Priority Queue: Define a Priority Queue which would contain pairs of the type {dist, node},
                where ‘dist’ indicates the currently updated value of the shortest distance from the source to the ‘node’.
Dist Array: Define a dist array initialized with a large integer number at the start indicating that the nodes are unvisited initially.
            This array stores the shortest distances to all the nodes from the source node.


steps :

1) We would be using a min-heap and a distance array of size V (where ‘V’ are the number of nodes in the graph)
    initialized with infinity (indicating that at present none of the nodes are reachable from the source node) and initialize the distance to source node as 0.


2) We push the source node to the queue along with its distance which is also 0.

3) For every node at the top of the queue,

        1) we pop the element out and look out for its adjacent nodes.
        2) If the current reachable distance is better than the previous distance indicated by the distance array, we update the distance and push it into the queue.



Cpmplexity :


while(!pq.isEmpty){
    pop node from pq
    iterate each adj node
    update distance array if using this node visiting that node is with less distance
    push node into queue

}

1) O(V *
    ( pop vertex from pq +
    (no of edges of each node * push into PQ)))

V --> Assuming all nodes are pushed in pQ
 pop vertex from pq   = log(heap size)

2) O(V * (log(heapsize)+ (any*log(heapsize))
3) O(V * (log(heapsize) * (1+any))
4) O(V * (log(heapsize) * (1+V-1)  // any = v-1
5) O(V * (log(heapsize) * (V)
6) O(V^2 * log(heapsize))
7) O(v^2 * log(v^2)  // heapsize = v^2
8) O(v^2 * 2logv)
9) O(E * 2*logv)  // E = v^2
10) O(E log v)
