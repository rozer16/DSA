https://takeuforward.org/data-structure/g-36-shortest-distance-in-a-binary-maze/
https://youtu.be/U5Mw4eyUmw4
https://leetcode.com/problems/shortest-path-in-binary-matrix/description/

Given an n * m matrix grid where each element can either be 0 or 1.
You need to find the shortest distance between a given source cell to a destination cell. The path can only be created out of a cell if its value is 1.

If the path is not possible between the source cell and the destination cell, then return -1.

Note: You can move into an adjacent cell if that adjacent cell is filled with element 1.
Two cells are adjacent if they share a side. In other words, you can move in one of four directions, Up, Down, Left, and Right.



Example 1:

Input:
grid[][] = {{1, 1, 1, 1},
            {1, 1, 0, 1},
            {1, 1, 1, 1},
            {1, 1, 0, 0},
            {1, 0, 0, 1}}
source = {0, 1}
destination = {2, 2}
Output:
3

Explanation:

1 1 1 1
1 1 0 1
1 1 1 1
1 1 0 0
1 0 0 1
The highlighted part in the above matrix denotes the shortest path from source to destination cell.

Example 2:

Input:
grid[][] = {{1, 1, 1, 1, 1},
            {1, 1, 1, 1, 1},
            {1, 1, 1, 1, 0},
            {1, 0, 1, 0, 1}}
source = {0, 0}
destination = {3, 4}
Output:
-1
Explanation:
Since, there is no path possible between the source cell and the destination cell, hence we return -1.




Initial configuration:

Source Node and Destination Node: Before starting off with the Algorithm, we need to define a source node and a destination node,
                                    between which we need the shortest possible distance.
Queue: Define a Queue which would contain pairs of the type {dist, pair of coordinates of cell },
        where ‘dist’ indicates the currently updated value of the shortest distance from the source to the cell.

Distance Matrix: Define a distance matrix that would contain the distance from the source cell to that particular cell.
                    If a cell is marked as ‘infinity’ then it is treated as unreachable/unvisited.


The Algorithm consists of the following steps :

Start by creating a queue that stores the distance-node pairs in the form {dist, coordinates of cell pair}
and a dist matrix with each cell initialized with a very large number ( to indicate that they’re unvisited initially) and the source cell marked as ‘0’.

We push the source cell to the queue along with its distance which is also 0.

Pop the element at the front of the queue and look out for its adjacent nodes (left, right, bottom, and top cell). Also, for each cell,
check the validity of the cell if it lies within the limits of the matrix or not.

If the current reachable distance to a cell from the source is better than the previous distance indicated by the distance matrix,
 we update the distance and push it into the queue along with cell coordinates.

A cell with a lower distance would be at the front of the queue as opposed to a node with a higher distance.
We repeat the above two steps until the queue becomes empty or until we encounter the destination node.

Return the calculated distance and stop the algorithm from reaching the destination node. If the queue becomes empty and we don’t encounter the destination node, return ‘-1’ indicating there’s no path from source to destination.
Here’s a quick demonstration of the algorithm :