https://takeuforward.org/data-structure/longest-increasing-subsequence-binary-search-dp-43/
https://youtu.be/on2hvxBXJH4


What is the Longest Increasing Subsequence?

The longest increasing subsequence is described as a subsequence of an array where:

All elements of the subsequence are in increasing order.
This subsequence itself is of the longest length possible.


Let us take an example and build up the intuition from here to solve this problem using binary search.

Arr {1 7 8 4 5 6 -1 9 }
LIS 1 4 5 6 9


Now let us loop through every element and try to form a new subsequence.

(i) index = 0, arr[i] is 1.

We can start forming the LIS from this index. Currently the LIS formed will be [1].

(ii) index = 1, arr[i] is 7.
LIS : 1,7

As 7 is greater than the last element of the LIS, i.e 0; we can push it to the LIS array.

(iii) index = 2, arr[i] is 8.
    LIS : 1,7,8

    As 8 is greater than the last element of the LIS, i.e 7; we can push it to the LIS array.

 (iv) index = 3, arr[i] is 4.

LIS : 1,4

        Now, 4 is less than 8, the last element of the LIS array, therefore we can’t push it like before. Rather we can make a second LIS array as shown in the figure above for the time being.

 (v) index = 4, arr[i] is 5.
    LIS : 1 4 5


    5 is not greater than 8, but it is greater than 4, the last element of the second LIS array that we made so we push it there.

 (vi) index = 5, arr[i] is 6
    LIS : 1 4 5 6


 6 is not greater than 8, but it is greater than 5, the last element of the second LIS array that we made so we push it there.

 (vii) index = 6, arr[i] is -1


        -1 is smaller than all the elements of both arrays, therefore we can’t push it anywhere in the first two LIS arrays. Therefore, we make a separate LIS array as shown in the figure.

(viii) index = 7, arr[i] is 9


        9 is greater than the last elements of all three LIS arrays, therefore we can push it to the last of all three.


=================


Now, we can return the length of the longest LIS array among the three, [1,  4,  5,  6,  9] i.e 5 as the final answer.

This is the basic intuition of the algorithm.
If we make a new LIS array at every junction,
it will take up a lot of space.

Now the question arises, do we need to store all these extra LIS arrays in a data structure to keep track of all the LIS formed as we traverse the array?

The answer is No, We can maintain a single array (say temp) and rewrite this temp array again in order to find the length of the LIS.
We are concerned about the length of the LIS rather than the LIS itself.

 Now, we see that the final temp array is not the LIS,
  but its length is giving us the answer (i.e the length of LIS of the original array).

 Now, the main part left is to find the index at which we need to do the replacement.
  If we have to insert an element X in the temp array, the following properties should be satisfied:

 The elements smaller than X should be present on the left side of X after replacement.
 The elements greater than or equal to X should be on the right side after replacement.
 Now as we are inserting in this particular manner, the array will always be sorted. Therefore we can search for the index by using binary search. In C++ the lower_bound function can be used to give us the particular index.

 The lower bound function(X) returns us the iterator (or in simple terms the index) of :

 The element X itself, if it is present.
 Or the next largest element, if the element is not present.
 Approach:

 Now, as we have understood the entire intuition of the algorithm we will summarize the approach:

 Initialize a temp array.
 Push the first element of the array to temp.
 Iterate over the next elements.
 In every iteration, if arr[i] is greater than the last element of the temp array simply push it to the temp array.
 Else, just find the lower_bound index of that element in the temp array (say ind). THen simply initialize temp[ind] = arr[i] (// replacement step).
 Maintain a len variable to calculate the length of the temp array in the iteration itself