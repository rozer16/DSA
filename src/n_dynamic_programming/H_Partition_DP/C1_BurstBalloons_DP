https://takeuforward.org/data-structure/burst-balloons-partition-dp-dp-51/
https://www.youtube.com/watch?v=Yz4LlDSlkns
https://leetcode.com/problems/burst-balloons/description/


You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.



Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
Example 2:

Input: nums = [1,5]
Output: 10

=================

From the question, we can easily understand that we must burst the balloons in a particular order to collect the maximum number of coins.
For example, in the first case, we followed the order: 1, 5, 3, 8 to collect the maximum number of coins i.e. 167.

So, the order of bursting the balloons will change the number of coins we can collect. There may be several orders that we can follow.

So, in order to find a valid order, can figure out the first balloon we will burst.
Apparently, the entire array(i.e. given) is the range of the elements(i.e. the balloons) and anyone among the elements can be the first.

First, we will try to solve the problem using the technique we have learned in MCM.
In the MCM, we selected the matrices sequentially so that the number of scalar multiplication is minimized.
Similarly, here we can maintain an order where we will first try to choose the first element, then we can try to find the second one, and so on.

Now, let’s understand if we can really solve the problem using the above approach:

Let’s consider the following example:

We are given an array: {b1, b2, b3, b4, b5, b6}.
Each element of the given array is representing a balloon.
Now, if we burst the b4, we will get a total of (b3*b4*b5) coins.
After bursting b4, we are left with the left sub-problem {b1, b2, b3} and the right sub-problem {b5, b6} to solve.


Now, the question is, if we can say that the final answer will be the
summation of the current number of coins and
the answers from the left
and right subproblems.

The answer is No.

Let’s understand the reason behind this.

Imagine, at first we burst the balloon b4.
Then, we are left with the array:  {b1, b2, b3, b5, b6}.
Now, if we try to burst b3, it will be dependent on b5.
Similarly, if we try to burst b5, it will be dependent on b3.
Similarly, we can observe the same dependency in the case of other elements as well.

So, we cannot solve the subproblems {b1, b2, b3} and {b4, b5} independently as they are dependent on each other.


Intuition:
Until now, we have clearly understood that we cannot solve this problem using this approach. So, we will just try to think in the opposite way.
First, we tried to find out a balloon that we will burst first. But now, we will first try to find that balloon which we will burst last.

Note: The intuition is to first find the last balloon, then the second last, and so on. This is the sequence we need to follow to solve this problem.

Now, let’s understand how the subproblems are independent in this approach:

Let’s consider the following example:

We are given an array: {b1, b2, b3, b4, b5, b6}.
Assume, b4 be the last balloon we will burst.
Then we can surely say, the total no. of coins we can get by bursting the balloon b4 is (1*b4*1).

Now, we get two subproblems as usual: {b1, b2, b3} and {b5, b6}, and while choosing the second last balloon,
we can ensure that b4 exists while bursting the second last balloon.

If the second last balloon belongs to the 1st sub-problem i.e. {b1, b2, b3},
it will be only dependent on the last balloon i.e. b4 as the rightmost element will be b4.

Similarly, if the second last balloon belongs to the 2nd sub-problem i.e. {b5, b6}, it will also be dependent only on the last balloon
i.e. b4 as the leftmost element will be b4.

Now, we can clearly observe the subproblems are no anymore dependent on each other.

We have found the right approach until now. Now, let us quickly revise the rules to solve a problem on partition dp.

Start with the entire block/array and mark it with i, j.
Try all partitions.
Return the best possible answer of the two partitions (the answer that comes after dividing the problem into two subproblems and solving them recursively).
Now let us go through these rules and apply them to this problem.

Marking the array with i, j:

We are given an array of balloons of size N. The entire array basically represents the range of the balloons. So, we will place i and j at both ends of the array.

Try all partitions:
As we have figured out the logic for marking the i, and j pointers, we will move to the partitioning loop. We can simply write a for loop(say ind) starting from i to j,
The problem is being broken in the following manner:

Note: Here f(i, ind-1) is the left sub-problem, and f(ind+1, j) is the right sub-problem.

Base Case: We can say that when i > j this is not a valid partition and so we will return 0.

Return the best possible answer:

Here, in this problem, we are trying to achieve the maximum possible answer
i.e. the maximum number of coins. So, among all the costs calculated, we will just store the maximum one. And finally, the maximum cost will be our answer.


Note: If you wish to see the dry run of the above approach, you can watch the video attached to this article.

Approach:

The recursive algorithm steps are as follows:

Append 1 to both ends of the given array.
Convert the problem to a recursive function marked by two pointers i and j.
Use a loop to check all possible combinations of balloons and get all possible total numbers of coins.
Return the maximum number of coins we can get.
Base case: If i > j, we will return 0.