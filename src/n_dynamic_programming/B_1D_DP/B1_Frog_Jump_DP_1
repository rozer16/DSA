https://takeuforward.org/data-structure/dynamic-programming-frog-jump-dp-3/
https://www.youtube.com/watch?v=EgG3jsGoPvQ

Problem Statement:

Given a number of stairs and a frog, the frog wants to climb from the 0th stair to the (N-1)th stair. At a time the frog can climb either one or two steps. A height[N] array is also given. Whenever the frog jumps from a stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]), where abs() means the absolute difference. We need to return the minimum energy that can be used by the frog to jump from stair 0 to stair N-1.


e.g.

N=4 , heights = [10,20,30 , 10], ans = 20



Memorization Approach
Algorithm / Intuition
As the problem statement states to find the minimum energy required, two approaches should come to our mind, greedy and dynamic programming.

First, we will see why a greedy approach will not work?

The total energy required by the frog depends upon the path taken by the frog. If the frog just takes the cheapest path in every stage it can happen that it eventually takes a costlier path after a certain number of jumps. The following example will help to understand this.

Therefore a greedy solution will not work and we need to try all possible paths to find the answer.

Steps to form the recursive solution

We will recap the steps discussed in the previous article to form the recursive solution.

Step 1: Express the problem in terms of indexes

This can be easily done as there are array indexes [0,1,2,..., n-1].
We can say that f(n-1) signifies the minimum amount of energy required to move from stair 0 to stair n-1.
Therefore f(0) simply should give us the answer as 0(base case).
Step 2: Try all the choices to reach the goal.

The frog can jump either by one step or by two steps. We will calculate the cost of the jump from the height array. The rest of the cost will be returned by the recursive calls that we make

Our pseudocode till this step will be:

f(ind, heights){
    if(ind == 0)
        return 0;

    left = f(n-1) + Abs(heights[n]-heights[n-1]
    right = Integer.MAX_HEIGHT;
    if(n>1)
        right = f(n-2) + Abs(heights[n-2]-heights[n])

    return min(left, right)


Memoization approach

Steps to convert Recursive code to memoization solution:

Create a dp[n] array initialized to -1.
Whenever we want to find the answer of a particular value (say n),
we first check whether the answer is already calculated using the dp array(i.e dp[n] != -1 ).
If yes, simply return the value from the dp array.
If not, then we are finding the answer for the given value for the first time,
we will use the recursive relation as usual but before returning from the function,
we will set dp[n] to the solution we get.


int solve(int ind,int[] height,int[] dp){
    if(ind==0) return 0;
    if(dp[ind]!=-1) return dp[ind];
    int jumpTwo = Integer.MAX_VALUE;
    int jumpOne= solve(ind-1, height,dp)+ Math.abs(height[ind]-height[ind-1]);
    if(ind>1)
        jumpTwo = solve(ind-2, height,dp)+ Math.abs(height[ind]-height[ind-2]);

    return dp[ind]=Math.min(jumpOne, jumpTwo);
}


Complexity Analysis
Time Complexity: O(N)

Reason: The overlapping subproblems will return the answer in constant time O(1).
Therefore the total number of new subproblems we solve is ‘n’. Hence total time complexity is O(N).

Space Complexity: O(N)

Reason: We are using a recursion stack space(O(N)) and an array (again O(N)).
Therefore total space complexity will be O(N) + O(N) ≈ O(N)


Tabulation Approach
Algorithm / Intuition

Declare a dp[] array of size n.
First, initialize the base condition values, i.e dp[0] as 0.
Set an iterative loop that traverses the array( from index 1 to n-1) and for every index calculate jumpOne and jumpTwo
 and set dp[i] = min(jumpOne, jumpTwo).



  int height[]={30,10,60,10,60,50};
   int n=height.length;
   int dp[]=new int[n];
   Arrays.fill(dp,-1);
   dp[0]=0;
   for(int ind=1;ind<n;ind++){
       int jumpTwo = Integer.MAX_VALUE;
         int jumpOne= dp[ind-1] + Math.abs(height[ind]-height[ind-1]);
         if(ind>1)
             jumpTwo = dp[ind-2] + Math.abs(height[ind]-height[ind-2]);

         dp[ind]=Math.min(jumpOne, jumpTwo);
   }
   System.out.println(dp[n-1]);