https://takeuforward.org/data-structure/maximum-sum-of-non-adjacent-elements-dp-5/
https://www.youtube.com/watch?v=GrMBfJNk_NY
https://leetcode.com/problems/house-robber/description/



Given an array of ‘N’  positive integers, we need to return the maximum sum of the subsequence such that no two elements of the subsequence are adjacent elements in the array.

Note: A subsequence of an array is a list with elements of the array where some elements are deleted ( or not deleted at all) and the elements should be in the same order in the subsequence as in the array.


You are a professional robber planning to rob houses along a street.
 Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them
 is that adjacent houses have security systems connected and it will automatically contact the police
 if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house,
return the maximum amount of money you can rob tonight without alerting the police.

lgorithm / Intuition
As we need to find the sum of subsequences, one approach that comes to our mind is to generate all subsequences and pick the one with the maximum sum.

To generate all the subsequences, we can use the pick/non-pick technique. This technique can be briefly explained as follows:

At every index of the array, we have two options.
First, to pick the array element at that index and consider it in our subsequence.
Second, to leave the array element at that index and not to consider it in our subsequence.
A more detailed explanation of this technique is taught in Recursion on subsequences. Readers are highly advised to watch that video.

First, we will try to form the recursive solution to the problem with the pick/non-pick technique. There is one more catch, the problem wants us to have only non-adjacent elements of the array in the subsequence, therefore we need to address that too.

Steps to form the recursive solution

We will use the steps mentioned in the article Dynamic Programming Introduction in order to form our recursive solution.

Step 1: Form the function in terms of indexes:

We are given an array which can be easily thought of in terms of indexes.
We can define our function f(ind) as : Maximum sum of the subsequence starting from index 0 to index ind.
We need to return f(n-1) as our final answer.
Step 2: Try all the choices to reach the goal.

As mentioned earlier we will use the pick/non-pick technique to generate all subsequences. We also need to take care of the non-adjacent elements in this step.

If we pick an element then, pick = arr[ind] + f(ind-2). The reason we are doing f(ind-2) is because we have picked the current index element so we need to pick a non-adjacent element so we choose the index ‘ind-2’ instead of ‘ind-1’.
Next we need to ignore the current element in our subsequence. So nonPick= 0 + f(ind-1). As we don’t pick the current element, we can consider the adjacent element in the subsequence.

ase Conditions

The base conditions for the recursive function will be as follows:

If ind=0, then we know to reach at index=0,
    we would have ignored the element at index = 1.
    Therefore, we can simply return the value of arr[ind] and consider it in the subsequence.

If ind<0, this case can hit when we call f(ind-2) at ind=1.
    In this case we want to return to the calling function
    so we simply return 0 so that nothing is added to the subsequence sum.


Our pseudocode till this step will be:



fn(ind, arr[]){
    if(ind == 0)
        return arr[0];

    if(ind < 0)
        return 0;

    int pick = arr[ind] + fn[ind-2]    ;
    int notPick = fn[ind-1]

    return max(pick, notPick);
}


Memoization approach

If we observe the recursion tree,
we will observe a number of overlapping subproblems.
Therefore the recursive solution can be memoized to reduce the time complexity.


Steps to convert Recursive code to memoization solution:

Create a dp[n] array initialized to -1.
Whenever we want to find the answer of a particular value (say n),
we first check whether the answer is already calculated using the dp array(i.e dp[n] != -1 ).
If yes, simply return the value from the dp array.
If not, then we are finding the answer for the given value for the first time,
we will use the recursive relation as usual but before returning from the function,
we will set dp[n] to the solution we get.
