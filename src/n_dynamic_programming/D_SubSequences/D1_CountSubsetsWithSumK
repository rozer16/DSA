https://takeuforward.org/data-structure/count-subsets-with-sum-k-dp-17/
https://www.youtube.com/watch?v=ZHyb-A2Mte4


Pre-req: Subset Sum equal to target, Recursion on Subsequences



Problem Statement:  Count Partitions with Given Difference

This article will be divided into two parts:

First, we will discuss an extra edge case of the problem discussed in Count Subsets with Sum K,and then,
we will discuss the problem for this article: Partitions with Given Difference.


Part 1: Case when all elements are greater than 0 in an array




Part 2 : Extra edge case if elements in array might have 0

In the part1, the problem constraints stated that an array element is greater than 0,
 so the code we have written there works perfectly for the given constraints.

If the constraints mentioned that an array element can also be equal to 0 and the target sum can also be 0,
then that code will fail. To understand it we will take an example:

Let the target arr = [0,0,1] and the target = 1.

The previous code will give us the answer 1 as it first takes the element arr[2] and then finds the answer by picking it. Then from the base condition, we will return 0 ( as the target will become 0 by picking 1). But for this question, the answer will be 4 with the following subsets({0,1},{0,1},{0,0,1} and {1}).

Therefore we need to modify the base conditions in order to handle the changes. These are the base conditions of that problem.

f(ind, target){

    if(ind == 0){
        if(target == 0 && arr[0] == 0) return 2;

        if(arr[0] == 0 || arr[0] == target) return 1;

        //pick

        //Not pick

        return pick + notpick
    }
