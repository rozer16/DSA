https://takeuforward.org/data-structure/number-of-operations-to-make-network-connected-dsu-g-49/
https://youtu.be/FYrl7iz9_ZU
https://leetcode.com/problems/number-of-operations-to-make-network-connected/description/


Problem Statement:

You are given a graph with n vertices and m edges.
You can remove one edge from anywhere and add that edge between any two vertices in one operation.
Find the minimum number of operations that will be required to make the graph connected.
If it is not possible to make the graph connected, return -1.


Solution:

Before discussing the solution, let’s understand the question.
In the question, it is clearly stated that our objective is to make the given graph connected.
Now, we can do this by just connecting the different components of a given graph with some edges


But according to the question, we cannot add random edges from outside
rather we can remove any given edge and add that to a new position to fulfill the purpose.

Note: In order to add any edge to the desired position, we must take it out from somewhere inside the graph.
      We cannot add any edge randomly from outside.
      So, the intuition is to remove the required minimum number of edges and plant them somewhere in the graph so that the graph becomes connected.


Observation 1: How can we connect components to make the graph connected?
               In order to connect two different components of a graph we need to connect any node of the first component to any node of the second component.

Observation 2:
                From the method of connecting the components, discussed above,
                we can conclude that we need a minimum of nc-1 edges to make the graph connected if the graph contains nc number of different components.
                If a graph contains a single component we need 0 edges to make it connected.

Observation 3 :
            We need to remove the edges in such a way that the components remain connected even after removing those edges.
            We can assume these types of edges as extra-edges.


Until now, we have found that we need a minimum of nc-1 edges (nc = no. of components of the graph) to make the graph connected.
And according to the question, to add these nc-1 edges, the graph must contain a minimum of nc-1 extra edges.

So, we can conclude that if a graph contains nc-1 extra-edges,
we can make the graph connected with just nc-1 operations(where nc = no. of components of the graph).

Approach:

In order to solve this question we will first find out the number of extra-edges
and then we will find out the number of components of the graph. We will be using the Disjoint Set data structure to do so.

The algorithm steps are the following:

First we need to extract all the edge information (If not already given) in the form of the pair (u, v)
where u = starting node and v = ending node. We should store all the edge information in an array.

Then we will iterate through the array selecting every pair and checking the following:

If the ultimate parent of u and v(checked using the findPar() method of the Disjoint set) becomes the same,
 we should increase the count of extra-edges by 1.
Because the same ultimate parent means the nodes are already connected and so we can consider the current edge as an extra edge.

But if the ultimate parents are different, then we should apply the union(either unionBySize() or unionByRank()) method on those two nodes.
Thus we will get the count of the extra edges. Now it’s time to count the number of components.
In order to do so, we will just count the number of the nodes that are the ultimate parent of themselves.

We will iterate over all the nodes and for each node, we will check the following:
If the node is the ultimate parent of itself, we will increase the count of components by 1.

Otherwise, we will continue to the next node.
This checking will be done using the parent array inside the Disjoint set.

Finally, we will check the count of extra edges and the number of components. If the count of extra-edges is greater or the same, we will return the answer that is (number of components - 1), and otherwise, we will return -1.
