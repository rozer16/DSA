https://takeuforward.org/data-structure/disjoint-set-union-by-rank-union-by-size-path-compression-g-46/
https://youtu.be/aBxjDBC4M1U

===================

Now, in order to solve this question we can use either the DFS or BFS traversal technique like if we traverse the components of the graph we can find
that node 1 and node 5 are not in the same component.

This is actually the brute force approach whose time complexity is O(N+E)(N = no. of nodes, E = no. of edges).
But using a Disjoint Set data structure we can solve this same problem in constant time.

The disjoint Set data structure is generally used for dynamic graphs.

Dynamic graph:
A dynamic graph generally refers to a graph that keeps on changing its configuration. Let’s deep dive into it using an example:

Let’s consider the edge information for the given graph as: {{1,2}, {2,3}, {4,5}, {6,7}, {5,6}, {3,7}}.
Now if we start adding the edges one by one, in each step the structure of the graph will change.
So, after each step, if we perform the same operation on the graph while updating the edges, the result might be different.
In this case, the graph will be considered a dynamic graph.
For example, after adding the first 4 edges if we look at the graph, we will find that node 4 and node 1 belong to different components
but after adding all 6 edges if we search for the same we will figure out that node 4 and node 1 belong to the same component.

So, after any step, if we try to figure out whether two arbitrary nodes u and v belong to the same component or not,
Disjoint Set will be able to answer this query in constant time.

Functionalities of Disjoint Set data structure:
The disjoint set data structure generally provides two types of functionalities:

Finding the parent for a particular node (findPar())
Union (in broad terms this method basically adds an edge between two nodes)
    Union by rank
    Union by size


Union by rank:
Before discussing Union by rank we need to discuss some terminologies:

    Rank: The rank of a node generally refers to the distance (the number of nodes including the leaf node) between the furthest leaf node and the current node.
           Basically rank includes all the nodes beneath the current node.

                    1
                2       3
            4

        Rank of node 1 is : 2 as distance between node 1 and the furthest leaf node 4 is 2

    Parent: The parent of a node generally refers to the node right above that particular node. But the ultimate parent refers to the topmost node or the root node.


Now let’s discuss the implementation of the union by rank function.
In order to implement Union by rank, we basically need two arrays of size N(no. of nodes).
One is the rank and the other one is the parent.
The rank array basically stores the rank of each node and the parent array stores the ultimate parent for each node.

Algorithm:

Initial configuration:
    rank array: This array is initialized with zero.
    parent array: The array is initialized with the value of nodes i.e. parent[i] = i.

The algorithm steps are as follows:

    1) Firstly, the Union function requires two nodes(let’s say u and v) as arguments.
        Then we will find the ultimate parent (using the findPar() function that is discussed later) of u and v.
        Let’s consider the ultimate parent of u is pu and the ultimate parent of v is pv.
    2) After that, we will find the rank of pu and pv.
    3) Finally,
            3.2) If ranks are unequal, we will connect the ultimate parent with a smaller rank to the other ultimate parent with a larger rank.
            3.1) But if the ranks are equal, we can connect any parent to the other parent
                 and we will increase the rank by one for the parent node to whom we have connected the other one.

Observation 1:
    If we carefully observe, we are only concerned about the ultimate parent but not the immediate parent.
    Let’s see why we need to find the ultimate parents.

    After union by rank operations, if we are asked (refer to the above picture) if node 5 and node 7 belong to the same component or not,
    the answer must be yes. If we carefully look at their immediate parents,
    they are not the same but if we consider their ultimate parents they are the same i.e. node 4.
    So, we can determine the answer by considering the ultimate parent. That is why we need to find the ultimate parent.
    So, here comes the findPar() function which will help us to find the ultimate parent for a particular node.

    findPar() function:    This function actually takes a single node as an argument and finds the ultimate parent for each node.

Observation 2:
    Now, if we try to find the ultimate parent(typically using recursion) of each query separately,
    it will end up taking O(logN) time complexity for each case. But we want the operation to be done in a constant time.
    This is where the path compression technique comes in.

    Using the path compression technique we can reduce the time complexity nearly to constant time. It is discussed later on why the time complexity actually reduces.

    What is path compression?
        Basically, connecting each node in a particular path to its ultimate parent refers to path compression.

    How the time complexity reduces:
        1
            2
                3
                    4

    Before path compression, if we had tried to find the ultimate parent for node 4,
    we had to traverse all the way back to node 1 which is basically the height of size logN.
    But after path compression, we can easily access the ultimate parent with a single step.
    Thus the traversal reduces and as a result the time complexity also reduces.

    Though using the path compression technique it seems like the rank of the node is also changing,
    we cannot be sure about it. So, we will not make any changes to the rank array while applying path compression.

    The algorithm steps are as follows:

    Base case: If the node and the parent of the node become the same, it will return the node.
    We will call the findPar() function for a node until it hits the base case
        and while backtracking we will update the parent of the current node with the returned value.

    Note: The actual time complexity of union by rank and findPar() is O(4) which is very small and close to 1.So, we can consider 4 as a constant.
    So, we can consider 4 as a constant. Now, this 4 term has a long mathematical derivation which is not required for an interview.


    Follow-up question:
        In the union by rank method, why do we need to connect the smaller rank to the larger rank?

        Consider below two tree
            1
        2

        3
            4
        5       6
            7       8

       Connecting larger to smaller

                1
            2       3
                        4
                    5       6
                        7       8

        In this case, the traversal time to find the ultimate parent for nodes 3, 4, 5, 6, 7, and 8 increases and so the path compression time also increases.
         But if we do the following

                3
            1       4
        2       5       6
                    7       8


        the traversal time to find the ultimate parent for only nodes 1 and 2 increases. So the path compression time becomes relatively lesser than in the previous case.
        So, we can conclude that we should always connect a smaller rank to a larger one with the goal of
        Shrinking the height of the graph.
        reducing the time complexity as much as we can.

Observation 3:
    Until now, we have learned union by rank, the findPar() function, and the path compression technique.
    Now, if we again carefully observe, after applying path compression the rank of the graphs becomes distorted.
    So, rather than storing the rank, we can just store the size of the components for comparing which component is greater or smaller.
    ypically, the size of a node refers to the number of nodes that are connected to it.

    So, here comes the concept of Union by size.

    Union by size:
        This is as same as the Union by rank method except this method uses the size to compare the components while connecting.
        That is why we need a ‘size’ array of size N(no. of nodes) instead of a rank array. T
        he size array will be storing the size for each particular node i.e. size[i] will be the size of the component starting from node i.


    Algorithm:

    Initial configuration:
        size array: This array is initialized with one
        parent array: The array is initialized with the value of nodes i.e. parent[i] = i.

    The algorithm steps are as follow :
        1) Firstly, the Union function requires two nodes(let’s say u and v) as arguments.
           Then we will find the ultimate parent (using the findPar() function discussed earlier) of u and v.
           Let’s consider the ultimate parent of u is pu and the ultimate parent of v is pv.

        2) After that, we will find the size of pu and pv i.e. size[pu] and size[pv].

        3) Finally, we will connect the ultimate parent with a smaller size to the other ultimate parent with a larger size.
           But if the size of the two is equal, we can connect any parent to the other parent.

            While connecting in both cases we will increase the size of the parent node to whom we have connected by the size of the other parent node
            which is actually connected.


            Note: It seems much more intuitive than union by rank as the rank gets distorted after path compression.
            Note: The findPar() function remains the exact same as we have discussed earlier.

            Time Complexity:  The time complexity is O(4) which is very small and close to 1. So, we can consider 4 as a constant.

==================
DisjoinSet Union By Rank/Size

1) Initialize
    int rank [n+1] with 0 value
    int parennt[n+1]  with parent[i] = i;


2) fn int findUltimateParenet(Node n)
    if(parent[n] == n)
        return n;

    //Path Compression
    parent[n] = findUltimateParent(parent[n))
    return parent[n];


    //We will not reduce rank when doing path compression because there could be other child of ultimate parent
    //and it might have that rank so reducing rank will lead to incorrect result.

3) fn void unionByRank( Node u, node v)
    int upu =  findUltimateParenet(u);
    int upv =  findUltimateParenet(v);

    //If u & v are of same component no need to perform union
    if upu == upv
        return

    //rank will lower node will be connected to rank with higher node
    //If rank of u is grater than rank of v then v will be connected to u
    if(rank[upu] > rank[upv]){
        parent[upv] = parent[upu]
     //If rank of v is grater than rank of u then u will be connected to v
    }else if(rank[upu] < rank[upv]){
        parent[upu] = parent[upv]
    //If rank of u & v are equal then any one can connect to anyone and final parent rank will be increased by one.
    }else{
        parent[upu] = parent[upv]
        rank[upv]++;
    }

======================================================================================================




======================================================================================================



    Time Complexity:  The time complexity is O(4) which is very small and close to 1. So, we can consider 4 as a constant.

======================================================================================================++