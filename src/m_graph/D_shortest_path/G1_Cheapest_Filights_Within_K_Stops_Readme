https://takeuforward.org/data-structure/g-38-cheapest-flights-within-k-stops/
https://leetcode.com/problems/cheapest-flights-within-k-stops/description/
https://youtu.be/9XybHVqTHcQ?list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn

G-38: Cheapest Flights Within K Stops


3

0
There are n cities and m edges connected by some number of flights. You are given an array of flights where flights[i] = [ fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost price. You have also given three integers src, dst, and k, and return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

Example 1:

Input:
n = 4
flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]]
src = 0
dst = 3
k = 1
Output:
700
Explanation:
The optimal path with at most 1 stops from city 0 to 3 is marked in red and has cost 100 + 600 = 700.
Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.

Input:
n = 3
flights = [[0,1,100],[1,2,100],[0,2,500]]
src = 0
dst = 2
k = 1
Output:
200
Explanation:
The graph is shown above.
The optimal path with at most 1 stops from city 0 to 2 is marked in red and has cost 100 + 100 = 200.



Intuition:

Since in this problem, we have to calculate the minimum cost to reach the destination from the source
but with a restriction on the number of stops, we would be using Dijkstraâ€™s Algorithm.
Now, one must wonder that based on what parameter we should add elements to the priority queue.

Now, if we store the elements in the priority queue with the priority given to the minimum distance first,
then after a few iterations we would realize that the Algorithm will halt when the number of stops would exceed.
This may result in a wrong answer as it would not allow us to explore those paths which have more cost but fewer stops than the current answer.

To tackle this issue, we store the elements in terms of the minimum number of stops in the priority queue
so that when the algorithm halts, we can get the minimum cost within limits.

Also, a point to note here is that do we really need a priority queue for carrying out the algorithm?
 The answer for that is No because when we are storing everything in terms of a number of stops,
 the stops are increasing monotonically which means that the number of sops is increasing by 1 and when we pop an element out of the queue,
 we are always popping the element with a lesser number of stops first.
 Replacing the priority queue with a simple queue will let us eliminate an extra log(N) of the complexity of insertion-deletion in a priority queue
 which would in turn make our algorithm a lot faster.

