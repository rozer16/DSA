https://takeuforward.org/data-structure/count-partitions-with-given-difference-dp-18/
https://www.youtube.com/watch?v=zoilQD1kYSg


Count Partitions with Given Difference (DP - 18)


We are given an array ‘ARR’ with N positive integers and an integer D.
We need to count the number of ways we can partition the given array into two subsets,
 S1 and S2 such that S1 - S2 = D and S1 is always greater than or equal to S2.


For example :
If N = 4, D = 3, ARR = {5, 2, 5, 1}
There are only two possible partitions of this array.
Partition 1: {5, 2, 1}, {5}. The subset difference between subset sum is: (5 + 2 + 1) - (5) = 3
Partition 2: { 2, 5, 1}, {5}. The subset difference between subset sum is: (5 + 2 + 1) - (5) = 3
These two partitions are different because, in the 1st partition, S1 contains 5 from index 0, and in the 2nd partition, S1 contains 5 from index 2.


Observation 1)  : TotalSum = S1+S2 ==> S1 = TotalSum-S2
Observation 2)  :   S1-S2 = D

                    TotalSum - S2 - S2 = D
                    TotalSum-2S2 = D
                    TotalSum-D = 2S2
                    S2 = (TotalSum-D)/2

So we need to find no of subset whose sum(target) is (TotalSum-D)/2
From above e.g.
If N = 4, D = 3, ARR = {5, 2, 5, 1}

we need to find no of subsets having sum (TotalSum-D)/2 = (13-3)/2 = 5
which are two
{5},  //Index 0
{5}  //Index 1

Constrains :

1) All the nos in an arrays will be greater than 0
that means s2(sum of elements) = totalSum-D cannot go negative
(TotalSum-D) >= 0


2) All elements in an array are Integers, no fraction so (TotalSum-D) should be devisible
  so (TotalSum-D ) %2 must be 0



  pseudo code

fn(arr, target){
     int n = arr.length;
      int totSum = 0;
      for(int i=0; i<arr.length;i++){
          totSum += arr[i];
      }

      //Checking for edge cases
      if(totSum-d<0) return 0;
      if((totSum-d)%2==1) return 0;

      int s2 = (totSum-d)/2;

      return countSubsetHavingSumk(arr,s2);

}