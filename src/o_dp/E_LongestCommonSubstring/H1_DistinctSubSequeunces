https://takeuforward.org/data-structure/distinct-subsequences-dp-32/
https://leetcode.com/problems/distinct-subsequences/description/
https://takeuforward.org/data-structure/distinct-subsequences-dp-32/





Given two strings s and t, return the number of distinct subsequences of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.



Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from s.
rabbbit
rabbbit
rabbbit
Example 2:

Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from s.
babgbag
babgbag
babgbag
babgbag
babgbag


Constraints:

1 <= s.length, t.length <= 1000
s and t consist of English letters.



===================


Algorithm / Intuition
We have to find distinct subsequences of S2 in S1.
 As there is no uniformity in data,
 there is no other way to find out than to try out all possible ways. To do so we will need to use recursion.

Steps to form the recursive solution:

We will first form the recursive solution by the three points mentioned in the Dynamic Programming Introduction.

Step 1: Express the problem in terms of indexes.
        We are given two strings. We can represent them with the help of two indexes i and j. Initially, i=n-1 and j=m-1, where n and m are lengths of strings S1 and S2. Initially, we will call f(n-1,j-1), which means the count of all subsequences of string S2[0…m-1] in string S1[0…n-1]. We can generalize it as follows:

Step 2:
        Try out all possible choices at a given index.

        Now, i and j represent two characters from strings S1 and S2 respectively. We want to find distinct subsequences.
        There are only two options that make sense: either the characters represented by i and j match or they don’t.

            Case 1: When the characters match
                    if(S1[i]==S2[j]), let’s understand it with the following example:


                    S1[i] == S2[j], now as the characters at i and j match,
                    we would want to check the possibility of the remaining characters of S2 in S1
                    therefore we reduce the length of both the strings by 1 and call the function recursively.


                    Now, if we only make the above single recursive call,
                    we are rejecting the opportunities to find more than one subsequences
                    because it can happen that the jth character may match with more characters in S1[0…i-1],
                    for example where there are more occurrences of ‘g’ in S1 from which also an answer needs to be explored.


            To explore all such possibilities, we make another recursive call in which we reduce the length of the S1 string by 1 but keep the S2 string the same, i.e we call f(i-1,j).


            Case 2: When the characters don’t match

            if(S1[i] != S2[j]), it means that we don’t have any other choice than to try the next character of S1 and match it with the current character S2.


This can be summarized as :

if(S1[i]==S2[j]), call f(i-1,j-1) and f(i-1,j).
if(S1[i]!=S2[j]), call f(i-1,j).
Step 3:  Return the sum of choices

As we have to return the total count, we will return the sum of f(i-1,j-1) and f(i-1,j) in case 1 and simply return f(i-1,j) in case 2.

Base Cases:

We are reducing i and j in our recursive relation, there can be two possibilities, either i becomes -1 or j becomes -1.

if j<0, it means we have matched all characters of S2 with characters of S1, so we return 1.
if i<0, it means we have checked all characters of S1 but we are not able to match all characters of S2, therefore we return 0.
The final pseudocode after steps 1, 2, and 3:


Steps to memoize a recursive solution:

If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:

Create a dp array of size [n][m]. The size of S1 and S2 are n and m respectively, so the variable i will always lie between ‘0’ and ‘n-1’ and the variable j between ‘0’ and ‘m-1’.
We initialize the dp array to -1.
Whenever we want to find the answer to particular parameters (say f(i,j)), we first check whether the answer is already calculated using the dp array(i.e dp[i][j]!= -1 ). If yes, simply return the value from the dp array.
If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[i][j] to the solution we get.
