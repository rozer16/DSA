Problem Statement: Minimum Insertions/Deletions to Convert String A to String B

We are given two strings, str1 and str2. We are allowed the following operations:

Delete any number of characters from string str1.
Insert any number of characters in string str1.
We need to tell the minimum operations required to convert str1 to str2.


We need to find the minimum operations required to convert string str1 to str2. Let us keep the “minimum” criteria aside and think, what maximum operations will be required for this conversion?

The easiest way is to remove all the characters of str1 and then insert all the characters of str2. In this way, we will convert str1 to str2 with ‘n+m’ operations. (Here n and m are the length of strings str1 and str2 respectively).

The problem states us to find the minimum of insertions. Let us try to figure it out:

To minimize the operations, we will first try to refrain from deleting those characters which are already present in str2. More extensively, we refrain from deleting those characters which are common and come in the same order. To minimize the operations, we would like to keep the maximum common characters coming in the same order intact. These maximum characters are the characters of the longest common subsequence.
We will first keep the longest common subsequence of the str1 and str2 intact in str1 and delete all other characters from str1.

Next, we will insert all the remaining characters of str2 to str1.

In order to minimize the operations, we need to find the length of the longest common subsequence.

Minimum Operations required = (n - k) + (m - k)

Here n and m are the length of str1 and str2 respectively and k is the length of the longest common subsequence of str1 and str2.

Approach:

The algorithm is stated as follows:

Let n and m be the length of str1 and str2 respectively.
Find the length of the longest common subsequence ( say k) of str1 and str2 as discussed in  Longest Common Subsequence.
Return (n-k) + (m-k) as answer.