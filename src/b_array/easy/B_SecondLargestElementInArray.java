package b_array.easy;

/*

*
* https://practice.geeksforgeeks.org/problems/second-largest3735/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=second-largest
https://youtu.be/37E9ckMDdTk

*

Bruteforce : two loop : O(n^2)
Better : Hint:  first find largest and then one min than largest, TC : O(N)
Optimal :

* */
public class B_SecondLargestElementInArray {

    public static void main(String[] args) {
        B_SecondLargestElementInArray test  = new B_SecondLargestElementInArray();
        int [] arr = {426,317,597,341,625,883,894,861,573,648,24,492,647,322,512,943,69,923,832,494,607,566,247,552,370,235,872,21,348,726,414,509,249,759,926,895,62,565,989,220,564,276,812,77,919,937,945,426,432,499,968,148,487,525,921,413,349,713,212,727,393,311,2,99,793,974,286,907,164,362,261,433,70,263,577,98,243,869,492,837,871,180,779,888,326,282,736,29,551,595,645,81,334,544,190,494,803,459,542,513,949,186,76,430,962,418,784,282,163,285,913,946,348,511,361,458,850,686,715,665,448,816,19,35,275,378,543,342,989,38,949,833,551,284,45,970,618,572,896,575,807,922,121,48,557,59,434,587,372,152,354,343,16,105,575,525,904,940,479,891,799,790,227,131,995,312,621,181,380,118,233,600,191,460,34,574,468,417,183,681,92,345,302,992,503,446,15,631,797,695,189,222,187,51,792,728,888,872,38,486,97,167,811,733,450,218,119,22,15,201,951,597,794,497,910,604,124,382,206,489,345,282,177,245,71,951,917,86,728,129,607,679,889,160,111,262,538,925,917,719,638,282,778,943,453,783,915,4,601,714,169,611,901,518,260,241,413,640,641,886,897,966,185,383,308,488,772,995,829,948,518,593,747,557,633,8,558,251,827,78,388,497,162,261,329,91,797,19,603,526,860,793,829,132,939,286,945,640,595,653,820,528,553,404,20,249,643,294,557,126,936,852,909,580,832,919,453,560,460,753,73,578,703,917,146,790,813,212,362,824,74,938,822,848,735,976,107,766,400,291,714,736,610,644,630,834,755,514,913,197,2,221,993,483,457,588,56,506,367,745,389,807,403,3,805,965,318,501,694,382,889,933,413,120,295,608,982,388,204,420,700,611,414,262,730,490,570,348,889,489,634,606,59,382,166,217,87,342,105,235,902,551,557,70,926,655,449,31,132,929,378,998,231,122,304,315,691,103,955,191,324,50,29,113,675,60,409,930,877,84,973,35,354,593,244,605,876,661,375,729,753,866,637,57,506,618,57,118,253,385,683,324,696,981,209,883,279,450,110,176,967,703,812,355,716,781,23,586,776,561,154,885,485,935,574,619,877,697,367,310,64,889,754,403,158,412,676,133,645,647,637,201,805,582,357,180,82,946,589,508,722,491,409,517,8,359,868,926,816,602,477,827,972,190,864,68,518,644,712,677,54,236,588,471,423,50,120,631,821,410,102,157,930,924,844,472,434,387,735,665,218,211,704,669,96,889,638,174,703,392,445,164,754,665,957,664,740,306,462,658,805,586,650,692,40,508,475,430,682,58,480,739,29,276,146,972,526,378,91,259,227,470,9,539,265,565,432,678,261,191,750,47,106,76,714,25,971,530,95,903,105,669,406,270,79,495,210,168,620,72,472,843,488,638,854,649,75,128,859,88,914,952,432,413,836,576,773,52,836,455,807,4,327,76,441,593,857,433,385,57,707,875,420,892,775,529,508,637,943,340,552,454,443,14,501,435,306,502,164,814,331,850,796,675,708,854,745,492,131,300,933,504,618,252,39,591,192,951,273,713,830,670,982,320,248,137,260,163,869,597,454,637,504,460,789,461,112,139,103,199,396,480,432,203,923,923,825,108,499,815,303,220,737,385,550,142,544,24,789,476,77,557,371,994,291,437,522,434,138,556,530,698,662,997,770,451,692,631,739,755,808,746,989,566,861,771,583,360,973,20,784,86,754,175,571,109,515,804,115,339,355,57,435,885,895,514,609,377,967,913,132,901,118,935,572,223,909,140,337,398,525,876,182,537,924,963,871,655,818,761,161,678,371,81,921,176,344,335,463,707,58,561,820,288,14,287,603,799,88,829,764,592,9,985,534,205,882,224,318,518,262,614,635,93,994,93,20,131,449,173,388,467,246,621,780,414,968,346,410,198,109,430,977,799,424,610,865,298,197,823,352,804,960,608,521,286,768,580,692,831,465,148,446,47,314,472,683,989,572,527,633,156,885,326,783,17,356,960,350,392,869,575,110,295,215,634,348,795,45,823,594,34,538,787,87,441,552,440,361,175,770,654,993,9,368,158,918,999};
        System.out.println(test.optimalSolution(arr,arr.length));
    }

    //TC : O(n)
    //Hint : Take first element as largest and -1 as second largest and iterate elements
    public int optimalSolution(int [] arr,int len){
        int largest = arr[0];
        int sLargest = -1;
        for (int i = 1; i < arr.length; i++) {
            if(arr[i] > largest){
                sLargest = largest;
                largest = arr[i];
            }
            else if(arr[i] < largest && arr[i]>sLargest)
                sLargest = arr[i];

        }

        return sLargest;
    }


    // Hint:  first find largest and then one min than largest, TC : O(2N)

    int print2largest(int arr[], int n) {
        int largest = largest(arr,n);
        int secondLargest = Integer.MIN_VALUE;
        int left = 0;
        int right = n-1;

        while(left <= right){
            if(arr[left] < largest && arr[left] > secondLargest){
                secondLargest = arr[left];
            }
            if(arr[right] < largest && arr[right] > secondLargest){
                secondLargest = arr[right];
            }
            left++;
            right--;
        }
        return secondLargest;

    }

    public int largest(int arr[], int n) {
        int left = 0;
        int right = n-1;
        int max = 1;
        while(left <= right){
            int temp = arr[left] > arr[right] ? arr[left] : arr[right];
            max = max < temp ? temp : max;
            left++;
            right--;
        }
        return max;
    }


}
