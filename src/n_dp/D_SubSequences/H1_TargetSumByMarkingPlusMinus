https://takeuforward.org/data-structure/target-sum-dp-21/
https://www.youtube.com/watch?v=b3GD8263-PQ

https://leetcode.com/problems/target-sum/description/


You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.



Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3


========




Observation 1)  : TotalSum = S1+S2 ==> S1 = TotalSum-S2
Observation 2)  : S1-S2 = D

TotalSum - S2 - S2 = D
TotalSum-2S2 = D
TotalSum-D = 2S2
S2 = (TotalSum-D)/2

So we need to find no of subset whose sum(target) is (TotalSum-D)/2
From above e.g.
If N = 4, D = 3, ARR = {5, 2, 5, 1}

we need to find no of subsets having sum (TotalSum-D)/2 = (13-3)/2 = 5
which are two
{5},  //Index 0
{5}  //Index 1

Constrains :

1) All the nos in an arrays will be greater than 0
that means s2(sum of elements) = totalSum-D cannot go negative
(TotalSum-D) >= 0


2) All elements in an array are Integers, no fraction so (TotalSum-D) should be devisible
  so (TotalSum-D ) %2 must be 0



  pseudo code

fn(arr, target){
     int n = arr.length;
      int totSum = 0;
      for(int i=0; i<arr.length;i++){
          totSum += arr[i];
      }

      //Checking for edge cases
      if(totSum-d<0) return 0;
      if((totSum-d)%2==1) return 0;

      int s2 = (totSum-d)/2;

      return countSubsetHavingSumk(arr,s2);

}